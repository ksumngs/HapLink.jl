var documenterSearchIndex = {"docs":
[{"location":"api/variationpileup/#VariationPileup","page":"VariationPileup","title":"VariationPileup","text":"","category":"section"},{"location":"api/variationpileup/","page":"VariationPileup","title":"VariationPileup","text":"CurrentModule = HapLink\nDocTestSetup = quote\n    using HapLink\nend","category":"page"},{"location":"api/variationpileup/","page":"VariationPileup","title":"VariationPileup","text":"VariationPileup","category":"page"},{"location":"api/variationpileup/#HapLink.VariationPileup","page":"VariationPileup","title":"HapLink.VariationPileup","text":"VariationPileup\n\nSummarizes the basecalls that support a Variation within a set of alignments.\n\nFields\n\nvariation::Variation: The Variation of this pileup entry\ndepth::UInt: The number of times the position of variation appears in this set of alignments\nreadpos::Vector{Float64}: The relative positions of variation within each read\nquality::Vector{Float64}: The phred quality of variation within each read\nstrand::Vecotr{Strand}: Which strand each variation is found on\n\n\n\n\n\n","category":"type"},{"location":"api/variationpileup/#Getter-methods","page":"VariationPileup","title":"Getter methods","text":"","category":"section"},{"location":"api/variationpileup/","page":"VariationPileup","title":"VariationPileup","text":"variation(::VariationPileup)\ndepth(::VariationPileup)\nreadpos(::VariationPileup)\nquality(::VariationPileup)\nstrand(::VariationPileup)\n","category":"page"},{"location":"api/variationpileup/#HapLink.variation-Tuple{VariationPileup}","page":"VariationPileup","title":"HapLink.variation","text":"variation(vp::VariationPileup)\n\nGets the Variation of vp\n\n\n\n\n\n","category":"method"},{"location":"api/variationpileup/#HapLink.depth-Tuple{VariationPileup}","page":"VariationPileup","title":"HapLink.depth","text":"depth(vp::VariationPileup)\n\nGets the number of times the position of vp.variation appears total (variant and wild-type)\n\n\n\n\n\n","category":"method"},{"location":"api/variationpileup/#HapLink.readpos-Tuple{VariationPileup}","page":"VariationPileup","title":"HapLink.readpos","text":"readpos(vp::VariationPileup)\n\nGets the relative positions of vp.variation\n\n\n\n\n\n","category":"method"},{"location":"api/variationpileup/#HapLink.quality-Tuple{VariationPileup}","page":"VariationPileup","title":"HapLink.quality","text":"quality(vp::VariationPileup)\n\nGets the phred qualities of vp.variation\n\n\n\n\n\n","category":"method"},{"location":"api/variationpileup/#HapLink.strand-Tuple{VariationPileup}","page":"VariationPileup","title":"HapLink.strand","text":"strand(vp::VariationPileup)\n\nGets the strands of vp.variation\n\n\n\n\n\n","category":"method"},{"location":"api/variationpileup/#Pileup-calculations","page":"VariationPileup","title":"Pileup calculations","text":"","category":"section"},{"location":"api/variationpileup/","page":"VariationPileup","title":"VariationPileup","text":"altdepth(::VariationPileup)\nfrequency(::VariationPileup)\nstrand_bias(::VariationPileup)","category":"page"},{"location":"api/variationpileup/#HapLink.altdepth-Tuple{VariationPileup}","page":"VariationPileup","title":"HapLink.altdepth","text":"altdepth(vp::VariationPileup)\n\nGets the number of times vp.variation appears\n\n\n\n\n\n","category":"method"},{"location":"api/variationpileup/#HapLink.frequency-Tuple{VariationPileup}","page":"VariationPileup","title":"HapLink.frequency","text":"frequency(vp::VariationPileup)\n\nGets the alternate allele frequency of vp.variation\n\n\n\n\n\n","category":"method"},{"location":"api/variationpileup/#HapLink.strand_bias-Tuple{VariationPileup}","page":"VariationPileup","title":"HapLink.strand_bias","text":"strand_bias(vp::VariationPileup)\n\nGets the frequency of positive strands that variation appears on relative to all variation reads\n\n\n\n\n\n","category":"method"},{"location":"api/variationpileup/#Miscellaneous","page":"VariationPileup","title":"Miscellaneous","text":"","category":"section"},{"location":"api/variationpileup/","page":"VariationPileup","title":"VariationPileup","text":"pileup","category":"page"},{"location":"api/variationpileup/#HapLink.pileup","page":"VariationPileup","title":"HapLink.pileup","text":"pileup(sam::AbstractPath, ref::AbstractPath) -> Vector{VariationPileup}\n\nGenerates a pileup of Variations based on the alignments in sam aligned against ref.\n\n\n\n\n\n","category":"function"},{"location":"tutorial/2-examples/#example-sequences","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires","text":"","category":"section"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"At this point, we'll play with the example sequences included gratis with HapLink. No, they don't represent anything, and they aren't particularly interesting, but they do run fast, so we can get a handle on how the interface and workflow operate.","category":"page"},{"location":"tutorial/2-examples/#Exploring-the-interface","page":"Kicking the tires (Fake sequences)","title":"Exploring the interface","text":"","category":"section"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"Go ahead and run haplink in your terminal. You should see a printout similar to that below.","category":"page"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"$ haplink\nError: valid sub-commands for command haplink are: consensus, haplotypes, sequences, variants, use -h or --help to check more detailed help info\n\n\n  haplink v1.0.0-rc1\n\n\n\nUsage\n\n  haplink <command>\n\nCommands\n\n  consensus                                                 Convert variant calls to consensus sequence\n\n  haplotypes                                                Call haplotypes\n\n  sequences                                                 Convert haplotype calls into haplotype sequences\n\n  variants                                                  Call variants\n\n\n\nFlags\n\n  -h, --help                                                Print this help message.\n  --version                                                 Print version.","category":"page"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"HapLink errors out only because you called on it but didn't give it any work to do. But it did manage to tell us the four tasks that it can do. We'll do through these commands in logical order. Yeah, it turns out that HapLink sorts the commands in alphabetical order, but if you ran them in that order nothing would happen.","category":"page"},{"location":"tutorial/2-examples/#Getting-the-goods","page":"Kicking the tires (Fake sequences)","title":"Getting the goods","text":"","category":"section"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"Let's get the example files from the code repository. In your terminal, run","category":"page"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"git clone https://github.com/ksumngs/HapLink.jl","category":"page"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"Now let's switch into the examples directory.","category":"page"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"cd HapLink.jl/example","category":"page"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"What all is available in here?","category":"page"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"$ ls -l\n.rw-r--r--. ksumngs ksumngs 92 Sat Apr 15 20:47:10 2023 reference.fasta\n.rw-r--r--. ksumngs ksumngs 486 Sat Apr 15 20:47:10 2023 sample.bam\n.rw-r--r--. ksumngs ksumngs 96 Sat Apr 15 20:47:10 2023 sample.bam.bai","category":"page"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"I see. We have a single sample alignment and its reference genome. It's a short sequence: we can view the entire thing on the command line.","category":"page"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"$ cat reference.fasta\n> reference\nACAACTTTATCTCTCTCAACTTCTTCCCTTACTATCCTTCACAACAATCCACACATTACTGCACTTTAAACACTTTTTTA","category":"page"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"If you happen to have samtools installed, you can also view the alignment. Samtools won't be required for this tutorial, however.","category":"page"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"$ # Count the number of lines\n$ samtools view sample.bam | wc -l\n10\n\n$ samtools view -h sample.bam | head -n6\n@HD VN:1.0 SO:coordinate\n@SQ SN:reference LN:80\n@PG ID:samtools PN:samtools VN:1.13 CL:samtools sort example/sample.sam\n@PG ID:samtools.1 PN:samtools PP:samtools VN:1.13 CL:samtools view -h sample.bam\nread01 0 reference 6 255 30M * 0 0 TTTATCTGTGTGAACTTCTTGGCTTAGTTT ????????????????????????????5? NM:i:7\nread02 0 reference 11 255 30M * 0 0 CTGTGTGAACTTCTTGGCTTAGTATCGTTG ?????????????????????????????? NM:i:8","category":"page"},{"location":"tutorial/2-examples/#Spot-the-difference","page":"Kicking the tires (Fake sequences)","title":"Spot the difference","text":"","category":"section"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"In order for HapLink to call haplotypes, it needs to know which sequence differences are due to sequencing errors, and which are due to genetic mutation. This process is known as variant calling, and HapLink comes bundled with a variant caller for just this type of occasion, which requires the reference genome and the alignment BAM file. Since we have both of those, let's run variant calling now.","category":"page"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"haplink variants reference.fasta sample.bam","category":"page"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"Notice that none of the variants got a PASS filter. In fact, all of them were weeded out by too high of thresholds for depth (remember we only have 10 sequences) and significance. Let's readjust and save our results.","category":"page"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"haplink \\\n  variants \\\n  reference.fasta \\\n  sample.bam \\\n  --depth 3 \\\n  --significance 0.1 \\\n  | tee sample.vcf","category":"page"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"These settings seemed to work out well. Let's stick with them and move on.","category":"page"},{"location":"tutorial/2-examples/#The-general-lay-of-the-land","page":"Kicking the tires (Fake sequences)","title":"The general lay of the land","text":"","category":"section"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"At this point, we're going to take a break from haplotype calling and convert those variant calls into a useful summary: the consensus sequence. HapLink, unlike many variant callers, can call the consensus sequence based solely off variant calls. Let's see that now.","category":"page"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"$ haplink consensus reference.fasta sample.vcf\n> reference_CONSENSUS\nACAACTTTATCTCTCTCAACTTCTTGGCATAGTTTCGTTGAGAAGAATCGAGAGATTAGTGCAGTTTAAA\nCACTTTTTTA","category":"page"},{"location":"tutorial/2-examples/#The-star-attraction","page":"Kicking the tires (Fake sequences)","title":"The star attraction","text":"","category":"section"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"And now it's time for haplotype calling. Before you get your hopes up, there are no true haplotypes in this file. If 10 reads could yield subconsenus mysteries, then bioinformatics would be a super easy job. Alas, we live in the real world, and we'll have to stretch mathematical constructs to get anything out of these reads.","category":"page"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"haplink \\\n  haplotypes \\\n  reference.fasta \\\n  sample.vcf \\\n  sample.bam \\\n  --consensus-frequency 0.75 \\\n  | tee sample.yml","category":"page"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"You can see that HapLink found only one haplotype in this alignment, but (spoilers!) this isn't really a haplotype. This is just the consensus sequence, formatted in HapLink's haplotype scheme.","category":"page"},{"location":"tutorial/2-examples/#If-at-first-you-don't-succeed","page":"Kicking the tires (Fake sequences)","title":"If at first you don't succeed","text":"","category":"section"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"If you have reads that don't span the entire genome (like we have here), you can use HapLink's maximum likelihood simulator to \"create\" full-length reads by splicing together reads and look for haplotypes on them. Even though we know there aren't any haplotypes in this sample, let's get out the simulator and give it a try.","category":"page"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"haplink \\\n  haplotypes \\\n  reference.fasta \\\n  sample.vcf \\\n  sample.bam \\\n  --consensus-frequency 0.75 \\\n  --simulated-reads \\\n  --iterations 100 \\\n  --overlap-min 0 \\\n  --overlap-max 100 \\\n  | tee sample.ml.yml","category":"page"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"Still nothing, huh? Like I said, no haplotypes here, and simulation can't change that. Note that simulating full-length reads used a lot more computational power, so you should try to stick with full-length reads when you can!","category":"page"},{"location":"tutorial/2-examples/#Packaging-it-up","page":"Kicking the tires (Fake sequences)","title":"Packaging it up","text":"","category":"section"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"HapLink's haplotype YAML files contain everything needed to recreate the haplotype computation, but they can't really be used by any other programs. That's why there's the sequences command, so haplotype sequences can be saved into FASTA format for use by other tools. Let's try this now.","category":"page"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"$ haplink sequences reference.fasta sample.yml\n> CONSENSUS\nTTTATCTCTCTCAACTTCTTGGCTTAGTATCGTTGAGAAGAATCGAGAGATTAGTGCAGTTTAAACACTT\nTTTTA","category":"page"},{"location":"tutorial/2-examples/","page":"Kicking the tires (Fake sequences)","title":"Kicking the tires (Fake sequences)","text":"You are now ready to move on to the","category":"page"},{"location":"api/variationcall/#VariationCall","page":"VariationCall","title":"VariationCall","text":"","category":"section"},{"location":"api/variationcall/","page":"VariationCall","title":"VariationCall","text":"CurrentModule = HapLink\nDocTestSetup = quote\n    using HapLink\nend","category":"page"},{"location":"api/variationcall/","page":"VariationCall","title":"VariationCall","text":"VariationCall","category":"page"},{"location":"api/variationcall/#HapLink.VariationCall","page":"VariationCall","title":"HapLink.VariationCall","text":"VariationCall\n\nRepresents a Variation that is supported by aligned reads with sufficient metadata to support or refute its validity. It is designed to be converted into a line in Variant Call Format, or a VCF.Record.\n\nFields\n\nvariation::Variation: The Variation of this call\nquality::Union{Nothing,Number}: Phred quality of the basecall for variation\nfilter::Vector{String}: Indicator if variation has passed filters and is actually a variant call, or a list of criteria that have failed it\ndepth::Union{Nothing,UInt}: The number of reads that cover leftposition(variation)\nstrandbias::Union{Nothing,Float64}: The fraction of times variation appears on a positive strand\naltdepth::Union{Nothing,UInt}: The number of types variation occurs\nreadpos::Union{Nothing,UInt}: The averagerelative position of variation in each read\npvalue::Union{Nothing,Float64}: The Fisher's Exact Test p-value of this call\n\n\n\n\n\n","category":"type"},{"location":"api/variationcall/#Getter-methods","page":"VariationCall","title":"Getter methods","text":"","category":"section"},{"location":"api/variationcall/","page":"VariationCall","title":"VariationCall","text":"variation(::VariationCall)\nquality(::VariationCall)\nfilter(::VariationCall)\ndepth(::VariationCall)\nstrand_bias(::VariationCall)\naltdepth(::VariationCall)\nreadpos(::VariationCall)\np_value(::VariationCall)\nfrequency(::VariationCall)","category":"page"},{"location":"api/variationcall/#HapLink.variation-Tuple{VariationCall}","page":"VariationCall","title":"HapLink.variation","text":"variation(vc::VariationCall) -> SequenceVariation.Variation\n\nGets the Variation of a VariationCall\n\n\n\n\n\n","category":"method"},{"location":"api/variationcall/#HapLink.quality-Tuple{VariationCall}","page":"VariationCall","title":"HapLink.quality","text":"quality(vc::VariationCall) -> Union{Nothing,Float64}\n\nGets the average phred quality score of vc, if known. Returns nothing if unknown.\n\nSee also quality(::VariationInfo), quality(::VariationPileup)\n\n\n\n\n\n","category":"method"},{"location":"api/variationcall/#HapLink.depth-Tuple{VariationCall}","page":"VariationCall","title":"HapLink.depth","text":"depth(vc::VariationCall) -> Union{Nothing,UInt}\n\nGets the number of times the position of vc appears total. Returns nothing if unknown.\n\nSee also depth(::VariationPileup)\n\n\n\n\n\n","category":"method"},{"location":"api/variationcall/#HapLink.strand_bias-Tuple{VariationCall}","page":"VariationCall","title":"HapLink.strand_bias","text":"strand_bias(vc::VariationCall) -> Union{Nothing,Float64}\n\nGets the fraction of times vc appears on the positive strand. Returns nothing if unknown.\n\nSee also strand(::VariationInfo), strand(::VariationPileup)\n\n\n\n\n\n","category":"method"},{"location":"api/variationcall/#HapLink.altdepth-Tuple{VariationCall}","page":"VariationCall","title":"HapLink.altdepth","text":"altdepth(vc::VariationCall) -> Union{Nothing,UInt}\n\nGets the number of times vc appears. Returns nothing if unknown.\n\nSee also altdepth(::VariationPileup)\n\n\n\n\n\n","category":"method"},{"location":"api/variationcall/#HapLink.readpos-Tuple{VariationCall}","page":"VariationCall","title":"HapLink.readpos","text":"readpos(vc::VariationCall) -> Union{Nothing,Float64}\n\nGets the average relative position of vc. Returns nothing if unknown.\n\nSee also readpos(::VariationPileup)\n\n\n\n\n\n","category":"method"},{"location":"api/variationcall/#HapLink.p_value-Tuple{VariationCall}","page":"VariationCall","title":"HapLink.p_value","text":"p_value(vc::VariationCall) -> Union{Nothing,Float64}\n\nGets the p-value of the observed statistic of vc. Returns nothing if unknown.\n\nSee also variation_test\n\n\n\n\n\n","category":"method"},{"location":"api/variationcall/#HapLink.frequency-Tuple{VariationCall}","page":"VariationCall","title":"HapLink.frequency","text":"frequency(vc::VariationCall) -> Float64\n\nGets the alternate allele frequency of vc\n\nSee also frequency(::VariationPileup)\n\n\n\n\n\n","category":"method"},{"location":"api/variationcall/#Variant-calling-methods","page":"VariationCall","title":"Variant calling methods","text":"","category":"section"},{"location":"api/variationcall/","page":"VariationCall","title":"VariationCall","text":"variation_test\ncall_variant","category":"page"},{"location":"api/variationcall/#HapLink.variation_test","page":"VariationCall","title":"HapLink.variation_test","text":"variation_test(depth::Int, altdepth::Int, quality::Float64)\n\nConducts a Fisher's Exact Test to deterimine the likelihood of a variant with total depth and variation depth altdepth occuring, given an average basecall quality. Returns the p-value of the test.\n\n\n\n\n\n","category":"function"},{"location":"api/variationcall/#HapLink.call_variant","page":"VariationCall","title":"HapLink.call_variant","text":"call_variant(\n    pileup::VariationPileup,\n    α::Float64;\n    D::Union{Nothing,Int}=nothing,\n    Q::Union{Nothing,Float64}=nothing,\n    X::Union{Nothing,Float64}=nothing,\n    F::Union{Nothing,Float64}=nothing,\n    S::Union{Nothing,Float64}=nothing,\n) -> VariationCall\n\nCalls variant from a pileup.\n\nArguments\n\npileup::VariationPileup: The pileup to call variants from\nα::Float64: Fisher's Exact Test significance (α) level to call variants\n\nKeywords\n\nnote: Note\nLeave any keyword undefined to skip filtering based on that field\n\nD::Union{Nothing,Int}=nothing: Minimum total read depth for a variant to be called\nQ::Union{Nothing,Float64}=nothing: Minimum average Phred quality for a variant to be   called\nX::Union{Nothing,Float64}=nothing: Maximum average distance variant can be from read   edge to be called\nF::Union{Nothing,Float64}=nothing: Minimum alternate frequency for a variant to be   called\nS::Union{Nothing,Float64}=nothing: Maximum proportion of the number of times variant can   appear on one strand versus the other\n\n\n\n\n\n","category":"function"},{"location":"cli/variants/#haplink-variants","page":"haplink variants","title":"haplink variants","text":"","category":"section"},{"location":"cli/variants/","page":"haplink variants","title":"haplink variants","text":"CurrentModule = HapLink\nDocTestSetup = quote\n    using HapLink\nend","category":"page"},{"location":"cli/variants/","page":"haplink variants","title":"haplink variants","text":"HapLink.variants","category":"page"},{"location":"cli/variants/#HapLink.variants","page":"haplink variants","title":"HapLink.variants","text":"function variants(\n    reference::String,\n    bam::String;\n    outfile::Union{String,Nothing}=nothing,\n    significance::Float64=1e-5,\n    depth::UInt64=UInt64(10),\n    quality::Float64=12.0,\n    frequency::Float64=0.05,\n    position::Float64=0.5,\n    strandedness::Union{Float64,Nothing}=nothing,\n)\n\nCall variants\n\nIntroduction\n\nDecides which variations found within an alignment are real, and which are due to random chance. HapLink uses Fisher's Exact Test to determine the statistical significance of sequence variations, and optionally allows for other thresholds to reduce random noise in the variant calling. Outputs a Variant Call Format (VCF) file compliant with VCF v4.\n\nArguments\n\nreference: path to the reference genome to call variants against in fasta format. Must   not be gzipped, but does not need to be indexed (have a sidecar fai file). HapLink only   supports single-segment reference genomes: if reference includes more than one   sequence, all but the first will be ignored.\nbam: alignment file to call variants from. Can be in SAM or BAM format, and does not   need to be sorted or indexed, but variant calling speed will increase significantly if   using a sorted and indexed (has a sidebar bai file) BAM file.\n\nOptions\n\n--outfile=<path>: The file to write variant calls to. If left blank, variant calls are   written to standard output.\n--significance=<float>: The alpha value for statistical significance of variant calls.\n--depth=<int>: Minimum number of times the variation must be observed within the   alignment to be called a variant\n--quality=<float>: The minimum average basecall quality score for a variation to be   called a variant\n--frequency=<float>: The minimum proportion of reads that the variation must be observed   within compared to all reads covering its position for that variation to be called a   variant\n--position=<float>: The distance (as a percentage) from the edge of reads that a   variation must be observed at to be called a variant\n--strandedness=<float>: The maximum proportion of times that a variation can be observed   on one strand versus the other to be called a variant. This metric is totally useless on   single-stranded sequencing protocols like Oxford Nanopore, but can be useful for   combining data between stranded protocols like most Illumina and Pacific Bio.\n\n\n\n\n\n","category":"function"},{"location":"api/variationinfo/#VariationInfo","page":"VariationInfo","title":"VariationInfo","text":"","category":"section"},{"location":"api/variationinfo/","page":"VariationInfo","title":"VariationInfo","text":"CurrentModule = HapLink\nDocTestSetup = quote\n    using HapLink\nend","category":"page"},{"location":"api/variationinfo/","page":"VariationInfo","title":"VariationInfo","text":"VariationInfo","category":"page"},{"location":"api/variationinfo/#HapLink.VariationInfo","page":"VariationInfo","title":"HapLink.VariationInfo","text":"VariationInfo{S<:BioSequence,T<:BioSymbol}\n\nRepresents statistics associated with a SequenceVariation.Variation within an aligned sequencing read.\n\nFields\n\nvariation::Variation{S,T}: The Variation this object represents\nreadpos::Float64: The location where variation occurs within a sequencing read\nquality::Float64: The phred-scaled basecall quality of variation\nStrand::GenomicFeatures.Strand: Which strand variation appears on\n\n\n\n\n\n","category":"type"},{"location":"api/variationinfo/#Getter-methods","page":"VariationInfo","title":"Getter methods","text":"","category":"section"},{"location":"api/variationinfo/","page":"VariationInfo","title":"VariationInfo","text":"variation(::VariationInfo)\nreadpos(::VariationInfo)\nquality(::VariationInfo)\nstrand(::VariationInfo)","category":"page"},{"location":"api/variationinfo/#HapLink.variation-Tuple{VariationInfo}","page":"VariationInfo","title":"HapLink.variation","text":"variation(vi::VariationInfo) -> SequenceVariation.Variation\n\nGets the Variation of a VariationInfo\n\n\n\n\n\n","category":"method"},{"location":"api/variationinfo/#HapLink.readpos-Tuple{VariationInfo}","page":"VariationInfo","title":"HapLink.readpos","text":"readpos(vi::VariationInfo) -> Float64\n\nGets the position of variation(vi) within a sequencing read\n\n\n\n\n\n","category":"method"},{"location":"api/variationinfo/#HapLink.quality-Tuple{VariationInfo}","page":"VariationInfo","title":"HapLink.quality","text":"quality(vi::VariationInfo) -> Float64\n\nGets the phred-scaled basecall quality of variation(vi) within a sequencing read\n\n\n\n\n\n","category":"method"},{"location":"api/variationinfo/#HapLink.strand-Tuple{VariationInfo}","page":"VariationInfo","title":"HapLink.strand","text":"strand(vi::VariationInfo) -> GenomicFeatures.Strand\n\nGets the strand that variation(vi) appears on\n\n\n\n\n\n","category":"method"},{"location":"api/variationinfo/#Miscellaneous","page":"VariationInfo","title":"Miscellaneous","text":"","category":"section"},{"location":"api/variationinfo/","page":"VariationInfo","title":"VariationInfo","text":"variationinfos","category":"page"},{"location":"api/variationinfo/#HapLink.variationinfos","page":"VariationInfo","title":"HapLink.variationinfos","text":"variationinfos(\n    query::Union{SAM.Record,BAM.Record}, reference::NucleotideSeq\n) -> Vector{VariationInfo}\nvariationinfos(\n    query::Union{AbstractString,AbstractPath},\n    reference::Union{AbstractString,AbstractPath}\n) -> Vector{VariationInfo}\n\nCalls Variations based on the alignments in query against reference, and returns every variation call found within query as a Vector{VariationInfo}\n\n\n\n\n\n","category":"function"},{"location":"#HapLink","page":"Home","title":"HapLink","text":"","category":"section"},{"location":"#Welcome","page":"Home","title":"Welcome","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Howdy! 🤠 And welcome to HapLink! 👋 HapLink is a command-line suite of tools to enable the exploration of viral quasispecies within a single metagenomic sample. Every piece eventually builds up to our viral haplotype caller, which uses linkage disequilibrium on long sequencing reads (💡 think Oxford Nanopore or PacBio HiFi) to identify genetic mutations that are conserved within a single virus particle.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This manual will cover the different ways of using HapLink, starting with a few tutorials before diving into the details of our reference section. Sound familiar? Yeah, this format was inspired by the old Maxis user manuals, like SimCity Classic, SimAnt, and SimFarm. Brace yourself for brainy quotes and bad jokes scattered through the documentation, but since this is 2023, also expect plenty of emojis and memes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: SimCity 2000 Meme)","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Why-HapLink?","page":"Home","title":"Why HapLink?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<blockquote>\n  <img\n    src=\"../assets/lentivirus.svg\"\n    style=\"max-width: 25%; max-height: 5em; float: left; padding-right: 1em;\" />\n  When I meet God, I am going to ask him two questions: Why relativity? And why\n  turbulence? I really believe he will have an answer for the first.\n  <br /><br />\n  &mdash; attr. to Werner Heisenberg\n</blockquote>","category":"page"},{"location":"","page":"Home","title":"Home","text":"tbd","category":"page"},{"location":"#How-it-works","page":"Home","title":"How it works","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<blockquote>\n  <div style=\"display: flex; justify-content: center;\">\n    <img src=\"assets/implementation-details.jpg\" style=\"max-width: 100%; max-height: 36em;\" />\n  </div>\n  <a href=\"https://libreddit.kavin.rocks/r/ProgrammerHumor/comments/12oiy2z/ill_take_15_to_20_minutes_worse/\">https://libreddit.kavin.rocks/r/ProgrammerHumor/comments/12oiy2z/ill_take_15_to_20_minutes_worse/</a>\n</blockquote>","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Ready to dive in? 🤿 Here's a 30,000-foot view","category":"page"},{"location":"","page":"Home","title":"Home","text":"curl -fsSL https://install.julialang.org | sh -s -- --yes\njulia \\\n  --startup-file=no \\\n  --history-file=no \\\n  --project=$(mktemp -d) \\\n  --quiet \\\n  -e 'using Pkg; Pkg.add(HapLink)'\necho 'export PATH=$HOME/.julia/bin:$PATH' >> $HOME/.bashrc\nsource ~/.bashrc\n\ngit clone https://github.com/ksumngs/HapLink.jl\ncd HapLink.jl/example\n\nhaplink variants \\\n  reference.fasta \\\n  sample.bam \\\n  --significance 0.5 \\\n  --depth 1 \\\n  --quality 10.0 \\\n  --position 0.01 \\\n  --frequency 0.05 \\\n  | tee sample.vcf\n\nhaplink consensus \\\n  reference.fasta \\\n  sample.vcf \\\n  | tee consensus.fasta\n\nhaplink haplotypes \\\n  reference.fasta \\\n  sample.vcf \\\n  sample.bam \\\n  --frequency 0.75 \\\n  | tee sample.yml\n\nhaplink sequences \\\n  reference.fasta \\\n  sample.yml \\\n  | tee sample.fasta","category":"page"},{"location":"tutorial/1-install/#installation","page":"In the beginning (Installation)","title":"In the beginning (Installation)","text":"","category":"section"},{"location":"tutorial/1-install/","page":"In the beginning (Installation)","title":"In the beginning (Installation)","text":"There are many different ways to install HapLink. Here we walk you through two of the most common. If you're one of the 0.01% who needs a different method, then we trust you can extrapolate from these instructions. Note that all of these tutorials assume you have a Unix-type system (MacOS, BSD, Linux). Windows command-line support is basically non-existant!","category":"page"},{"location":"tutorial/1-install/#Bioconda","page":"In the beginning (Installation)","title":"Bioconda","text":"","category":"section"},{"location":"tutorial/1-install/","page":"In the beginning (Installation)","title":"In the beginning (Installation)","text":"(Image: easy street by Bruce Fingerhood - CC-BY 2.0 (https://www.flickr.com/photos/19752067@N00/124876596) CC-BY 2.0)","category":"page"},{"location":"tutorial/1-install/","page":"In the beginning (Installation)","title":"In the beginning (Installation)","text":"We understand: every bioinformatian is addicted to miniconda. 🐍 And we're not here to judge. 👩‍⚖️ It's easy and portable and is bundled on HPCs. For your computational pleasure, we have implemented a bioconda recipe for HapLink so that you can install it into your conda environments and conda activate to your heart's content. This implementation is still a bit rough around the edges, so if you run into problems, it might be better to use the Comonicon method.","category":"page"},{"location":"tutorial/1-install/","page":"In the beginning (Installation)","title":"In the beginning (Installation)","text":"conda create -n haplink -c bioconda -c conda-forge haplink -y\nconda activate haplink\nhaplink --help","category":"page"},{"location":"tutorial/1-install/","page":"In the beginning (Installation)","title":"In the beginning (Installation)","text":"(Image: Bovine Coronavirus)I've got no respect for anyone who tries to take the easy way out.– Hank Williams III","category":"page"},{"location":"tutorial/1-install/#Comonicon","page":"In the beginning (Installation)","title":"Comonicon","text":"","category":"section"},{"location":"tutorial/1-install/","page":"In the beginning (Installation)","title":"In the beginning (Installation)","text":"(Image: Shell Art Deco Gas Station by ER0L - CC-BY 2.0 (https://www.flickr.com/photos/61030174@N03/8582830438))","category":"page"},{"location":"tutorial/1-install/","page":"In the beginning (Installation)","title":"In the beginning (Installation)","text":"This method is the most direct and leverages the power of Julia's built-in package manager to install HapLink directly into your shell.","category":"page"},{"location":"tutorial/1-install/#Step-1.-Install-Julia","page":"In the beginning (Installation)","title":"Step 1. Install Julia","text":"","category":"section"},{"location":"tutorial/1-install/","page":"In the beginning (Installation)","title":"In the beginning (Installation)","text":"HapLink is unashamedly a Julia program. That means that, yes, you will need Julia on your machine for HapLink to run under. Thankfully it is super easy to install Julia regardless of whether you are working on your own personal MacBook or a distant headless HPC. If you already have Julia installed, skip down to Step 2. Install HapLink. Otherwise, we will install Julia using a program called Juliaup. Juliaup has lots of cool features that you should check out, but we are just going to use it as an installer for today. Open a new command-line window and type the following command:","category":"page"},{"location":"tutorial/1-install/","page":"In the beginning (Installation)","title":"In the beginning (Installation)","text":"curl -fsSL https://install.julialang.org | sh -s -- --yes","category":"page"},{"location":"tutorial/1-install/","page":"In the beginning (Installation)","title":"In the beginning (Installation)","text":"This will install Juliaup, add modifications to your startup files so that your shells can find Juliaup, and install the latest stable version of Julia. If you were paying attention, you might have noticed Juliaup giving you instructions on how to enable Julia usage for that shell session. Run the provided command, or if you missed it, run","category":"page"},{"location":"tutorial/1-install/","page":"In the beginning (Installation)","title":"In the beginning (Installation)","text":". ~/.bashrc","category":"page"},{"location":"tutorial/1-install/#Step-2.-Install-HapLink","page":"In the beginning (Installation)","title":"Step 2. Install HapLink","text":"","category":"section"},{"location":"tutorial/1-install/","page":"In the beginning (Installation)","title":"In the beginning (Installation)","text":"Now we're going to install HapLink. Just run","category":"page"},{"location":"tutorial/1-install/","page":"In the beginning (Installation)","title":"In the beginning (Installation)","text":"julia \\\n  --startup-file=no \\\n  --history-file=no \\\n  --project=$(mktemp -d) \\\n  --quiet \\\n  -e 'using Pkg; Pkg.add(HapLink)'","category":"page"},{"location":"tutorial/1-install/","page":"In the beginning (Installation)","title":"In the beginning (Installation)","text":"This will install HapLink, but chances are it won't be accessible yet. We need to add HapLink to the PATH, first. Run","category":"page"},{"location":"tutorial/1-install/","page":"In the beginning (Installation)","title":"In the beginning (Installation)","text":"echo 'export PATH=$HOME/.julia/bin:$PATH' >> $HOME/.bashrc","category":"page"},{"location":"tutorial/1-install/","page":"In the beginning (Installation)","title":"In the beginning (Installation)","text":"to put HapLink on the PATH. You'll have to run . $HOME/.bashrc just like when you installed Julia for changes to take effect.","category":"page"},{"location":"tutorial/1-install/#Step-3.-Test-the-installation","page":"In the beginning (Installation)","title":"Step 3. Test the installation","text":"","category":"section"},{"location":"tutorial/1-install/","page":"In the beginning (Installation)","title":"In the beginning (Installation)","text":"Now, run the haplink command.","category":"page"},{"location":"tutorial/1-install/","page":"In the beginning (Installation)","title":"In the beginning (Installation)","text":"$ haplink -h\n\n\n  haplink v1.0.0-rc1\n\n\n\nUsage\n\n  haplink <command>\n...","category":"page"},{"location":"tutorial/1-install/","page":"In the beginning (Installation)","title":"In the beginning (Installation)","text":"Success! We now have a working installation of HapLink. You are now ready to move on to the next tutorial.","category":"page"},{"location":"api/variation/#Variation-Methods","page":"Variation Extensions","title":"Variation Methods","text":"","category":"section"},{"location":"api/variation/","page":"Variation Extensions","title":"Variation Extensions","text":"CurrentModule = HapLink\nDocTestSetup = quote\n    using HapLink\nend","category":"page"},{"location":"api/variation/","page":"Variation Extensions","title":"Variation Extensions","text":"These methods extend the functionality of SequenceVariation.Variation for calculation of data related to Variations created from NGS read alignments.","category":"page"},{"location":"api/variation/","page":"Variation Extensions","title":"Variation Extensions","text":"seqpos\nrelativepos\nquality(::Variation, ::Union{SAM.Record,BAM.Record})\nvariation(::VCF.Record, ::NucleotideSeq)","category":"page"},{"location":"api/variation/#HapLink.seqpos","page":"Variation Extensions","title":"HapLink.seqpos","text":"seqpos(v::Variation, a::Union{Alignment,AlignedSequence,PairwiseAlignment})\n\nGet the position of v in the sequence of a.\n\nExample\n\nusing BioAlignments, BioSequences, SequenceVariation\nv = Variation(dna\"AAAAA\", \"A3T\")\na = Alignment(\"2=1X2=\", 1, 1)\nseqpos(v, a)\n\n# output\n\n3\n\n\n\n\n\n","category":"function"},{"location":"api/variation/#HapLink.relativepos","page":"Variation Extensions","title":"HapLink.relativepos","text":"relativepos(v::Variation, r::Union{SAM.Record,BAM.Record})\n\nCalculates the fractional position of v within the sequence of r. If v is out-of-bounds of r, then will return 0 for positions before r and 1 for positions after r.\n\n\n\n\n\n","category":"function"},{"location":"api/variation/#HapLink.quality-Tuple{SequenceVariation.Variation, Union{XAM.BAM.Record, XAM.SAM.Record}}","page":"Variation Extensions","title":"HapLink.quality","text":"quality(v::Variation, r::Union{SAM.Record,BAM.Record}) -> Float64\n\nGet the phred-scalled basecall quality of v within the sequencing read of r.\n\n\n\n\n\n","category":"method"},{"location":"api/variation/#HapLink.variation-Tuple{VariantCallFormat.Record, BioSequences.BioSequence{<:BioSequences.NucleicAcidAlphabet}}","page":"Variation Extensions","title":"HapLink.variation","text":"variation(r::VCF.Record, refseq::NucleotideSeq)\n\nConstruct a Variation from r applying to refseq. There is no validation that r's actually describes a mutation in refseq.\n\n\n\n\n\n","category":"method"}]
}
